Это руководство по классу provod2.
Создатель: Артемий Морозов
Телеграмм: @tokreal

Класс работает лишь с C++ (работает на версии ISO 14 и выше)
Требования к запуску примера:
Windows 10, путь к g++ в переменной среды (d:\MinGw\bin).
Пример компиляции описан в build.bat
(можно использовать в качестве компиляции примера)

Данный класс представляет собой удобное, легкое средство для записи и чтения информации. Алгоритм работы строится на идеи алгоритма "погружения в глубину".

Класс может читать информацию из файла. Хранит ее в виде дерева. Корнем дерева является мнимая вершина, которая лишь хранит в себе указатели на своих сыновей.

Например, есть файл, в котором содержится некоторая информация:

rax ( eax ( ax ( ah ( ) al ( ) ) ) )

Читая этот файл, класс запишит информацию в виде дерева. Строка "rax" будет
хранится в сыне мнимого корня. Cтрока "eax" будет хранится в сыне вершины,
в которой хранится "rax". Строка "ax" будет хранится в сыне вершины, в которой хранится "eax". Вершины, в которых хранятся строки "ah" и "al" будут сыновьями вершины, в которой хранится "ax".

Запись информации производится следующим образом. (далее o - объект класса provod2)

o["rax"]["eax"]["ax"]["rrr"];

Если не у вершины, в которой хранится "ax", не было сына, в которой хранится "rrr",
он появится.

Для удаления какой-то веришнины, можно воспользоваться функцией deleteVertex().
Например:

o["rax"]["eax"]["ax"].deleteVertex("rrr");

Удалит из дерева вершину, в которой хранилась строка "rrr".

Так же можно получить вектор строк, которые хранятся в сыновьях веришны.
Например:

o["rax"]["eax"]["ax"].getVertex();

Вернет вектор из строк {"ah", "al"}

Для записи информации в файл используется функция write().

Например, o.write(); запишет все дерево в файл.

(Есть возможность записать исключительно все дерево).

Класс работает в оффлайне.

Алгоритм чтения информации очень прост. Если он встречает строку, не равную "(" или ")", запоминает ее. Если встречает "(", спускается вниз по дереву, ")" - поднимается.

В следствии такой реализации, нет возможности сохранять информацию, равную ")" или "(".

Алгоритм записи информации реализуется рекурсивно.


Стоит отметить, что класс может записывать и считывать лишь единожды!
